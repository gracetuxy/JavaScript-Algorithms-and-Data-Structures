function checkCashRegister(price, cash, cid) {
  var change = cash-price;
  var cidCP = JSON.parse(JSON.stringify(cid)); //must deepcopy Nested arrays so original argument (cid) not affected
  var changeArray = []; //change due in coins and bills; highest to lowest
  var map = {
    "PENNY": 0.01,
    "NICKEL": 0.05,
    "DIME": 0.1,
    "QUARTER": 0.25,
    "ONE": 1,
    "FIVE": 5,
    "TEN": 10,
    "TWENTY": 20,
    "ONE HUNDRED": 100
  }
  for (var i = cidCP.length-1; i >= 0; i--) { //start at biggest currency unit
    var acc = 0; //accumulates change taken from currency type i
    while (change >= map[cidCP[i][0]] && cidCP[i][1] != 0) {
      if (change >= cidCP[i][1]) {
        acc += cidCP[i][1];
        change -= cidCP[i][1];
        cidCP[i][1] = 0;
      } else {
        acc += map[cidCP[i][0]];
        change -= map[cidCP[i][0]];
        cidCP[i][1] -= map[cidCP[i][0]];
      }
      change = Math.round((change+Number.EPSILON)*100)/100; //rounds to 2dp
    }
    if (acc > 0) {
      changeArray.push([cidCP[i][0], acc]);
    }
  }
  if (change > 0) { //went thru all 'cid', but still missing change
    return {status: "INSUFFICIENT_FUNDS", change: []};
  }
  else if (change == 0 && cidCP.every(curr => curr[1] == 0)) {
    return {status: "CLOSED", change: cid};
  }
  else {
    return {status: "OPEN", change: changeArray}; 
  }
}

console.log(checkCashRegister(19.5, 20, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]));

console.log(checkCashRegister(3.26, 100, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.1], ["QUARTER", 4.25], ["ONE", 90], ["FIVE", 55], ["TEN", 20], ["TWENTY", 60], ["ONE HUNDRED", 100]]));
